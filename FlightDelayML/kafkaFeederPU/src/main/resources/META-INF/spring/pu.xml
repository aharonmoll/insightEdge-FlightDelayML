<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:os-core="http://www.openspaces.org/schema/core"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.openspaces.org/schema/core http://www.openspaces.org/schema/core/openspaces-core.xsd">


    <!--
        Spring property configurer which allows us to use system properties (such as user.name).
    -->
    <bean id="propertiesConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
      <property name="properties"><props>
        <prop key="kafka.producer.topic">flights</prop>
        <prop key="kafka.bootstrapServer">127.0.0.1:9092</prop>
        <prop key="space.name">jini://*/*/flights_space</prop>
        <prop key="feeder.lines">10</prop>
        <prop key="feeder.flights.url">https://insightedge-gettingstarted.s3.amazonaws.com/data.csv</prop>
        <prop key="feeder.flights.path">/data.csv</prop>
      </props></property>
    </bean>

    <!--
        Enables the usage of @GigaSpaceContext annotation based injection.
    -->
    <os-core:giga-space-context/>

    <!--
        A bean representing a space (an IJSpace implementation).

        Note, we perform a lookup on the space since we are working against a remote space.
    -->
    <os-core:space id="space" url="${space.name}" />

    <!--
        OpenSpaces simplified space API built on top of IJSpace/JavaSpace.
    -->
    <os-core:giga-space id="gigaSpace" space="space"/>

    <!--
        The Data feeder bean, writing new Data objects to the space in a constant interval.
    -->
    <bean id="dataFeeder" class="com.gigaspaces.kafkaFeeder.Feeder" depends-on="gigaSpace">
      <property name="delaysURL" value="${feeder.flights.url}"/>
      <property name="delaysFilePath" value="${feeder.flights.path}"/>
      <property name="linesToSend" value="${feeder.lines}"/>
      <property name="kafkaTopic" value="${kafka.producer.topic}"/>
      <property name="bootstrapServer" value="${kafka.bootstrapServer}"/>
    </bean>
    
</beans>
